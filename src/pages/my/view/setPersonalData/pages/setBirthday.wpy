<template>
<view class="setBirthday">
  <view class="content">
    <view class="label">
      <view class="flex flex-r flex-align-center flex-pack-justify">
        <view class="item flex flex-r flex-align-center">
          <view class="icon {{currentSelect == '公历'?'select':''}}" @tap="changeSelect('公历')"></view>
          <text>公历</text>
        </view>
        <calendarYearPicker :initDate.sync="initDate" :dateType.sunc='1'>
          <text class="pickerContent" slot="content">{{calendarYear}}</text>
        </calendarYearPicker>
      </view>
    </view>
    <view class="label flex flex-r flex-align-center flex-pack-justify">
      <view class="flex flex-r flex-align-center flex-pack-justify">
        <view class="item flex flex-r flex-align-center">
          <view class="icon {{currentSelect == '农历'?'select':''}}" @tap="changeSelect('农历')"></view>
          <text>农历</text>
        </view>
        <lunarCalendarPicker :initDate.sync="initDate" :dateType.sync='2'>
          <text class="pickerContent" slot="content">{{lunarCalendar}}</text>
        </lunarCalendarPicker>
      </view>
    </view>
  </view>
  
  
  </view>
</template>
<script>
  import wepy from "wepy";
  import api from "Api";
  import picker from "@components/picker";
  import datepickerPlus from "@components/datepickerPlus"
  export default class setBirthday extends wepy.page {
    config = {
      navigationBarTitleText: "生日类型",
      navigationBarTextStyle: "black",
      backgroundTextStyle: "light"
    }
    data = {
      currentSelect: "公历",
      calendarYear:`选择公历`,
      lunarCalendar:`选择农历`,
      initDate: `${new Date().getFullYear()}-${new Date().getMonth() + 1}-${new Date().getDate()}`
    };
    components = {
      picker,
      calendarYearPicker:datepickerPlus,
      lunarCalendarPicker:datepickerPlus
    };
    methods = {
      changeSelect(val) {
        this.currentSelect = val;
        if(this.calendarYear != "选择公历" && val == '公历'){
          this.infoModify("4",this.calendarYear)
        }else if(this.lunarCalendar != "选择农历" && val == '农历'){
          this.infoModify("5",this.lunarCalendar)
        }
      }
    };
    computed = {};
    events = {
      "bindDateChange" :(val)=>{
        // console.log(val);    
        // this.currentDate = val;
      },
      'currentDate': (calendarYear,lunarCalendar)=>{
        // this.lunarCalendar = lunarCalendar;
        // this.$apply();
      },
      'submit' :(val)=>{
        console.log(val);
        if(val.dateType == '公历'){
            let dateArr = val.dateStr.split('-');
            this.calendarYear = `${dateArr[0]}月${dateArr[1]}日`;
            this.$apply();
            this.infoModify("4",this.calendarYear)
        }else if(val.dateType == '农历'){
            this.lunarCalendar = val.dateStr;
            this.infoModify("5",this.lunarCalendar)
            this.$apply();
        }
      }
    };
    onLoad(options) {
      console.log(options.data)
      if(/[0-9]/.test(options.data)){
        console.log("公历");
        this.calendarYear = options.data;
        this.currentSelect = "公历";
      }else{
        console.log("农历");
        this.lunarCalendar = options.data;
        this.currentSelect = "农历";
      }
      this.$apply();
    };
    // 修改个人资料
    async infoModify(type,data) {
      let res =await api.infoModify({modifyList:[{
        type,
        data
      }]});
      return res;
    }
  }
</script>
<style lang="less" scoped>
.setBirthday {
  background-color: #F6F7F8;
  width: 100%;
  height: 100%;
  .content {
    width: 100%;
    height: 100%;
    padding-top: 19rpx;

    .label {
      padding: 0 27rpx 0 25rpx;
      background-color: #fff;

      >view {
        width: 100%;

        .item {
          height: 78rpx;

          .icon {
            width: 40rpx;
            height: 40rpx;
            border-radius: 50%;
            position: relative;
            margin-right: 39rpx;
            border: 2rpx #D6D6D6 solid;
            box-sizing: border-box;

            &.select {
              background-color: #FB684C;
              border: none;

              &::after {
                content: '\00a0';
                display: inline-block;
                border: 4rpx solid #fff;
                border-radius: 4rpx;
                border-top-width: 0;
                border-right-width: 0;
                width: 18rpx;
                height: 10rpx;
                -webkit-transform: rotate(-50deg);
                position: absolute;
                top: 13rpx;
                left: 9rpx;
              }
            }
          }

          >text {
            font-size: 27rpx;
            color: #333333;
          }
        }

        &:first-of-type {
          border-bottom: 1rpx #E6E6E6 solid;
        }
      }
      
      .pickerContent{
        display: inline-block;
        height: 100%;
        width: 154rpx;
        font-size: 28rpx;
        color: #666666;
      }
    }
  }
}
</style>